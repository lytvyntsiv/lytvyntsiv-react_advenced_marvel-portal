{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","View","char","name","description","thumbnail","homepage","wiki","className","src","alt","length","slice","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","spinner","Spinner","content","errorMessage","ErrorMessage","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","cards","map","i","onCharSelected","tabIndex","ref","el","onKeyPress","e","key","disabled","style","Skeleton","comics","imgStyle","CharInfo","charId","onError","setState","catch","skeleton","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/4.1be495eb.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './randomChar.scss'; \r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n  const [char, setChar] = useState({});\r\n\r\n  const {loading, error, getCharacter, clearError} = useMarvelService();\r\n  \r\n  useEffect(() => {\r\n    updateChar();\r\n    // const timerId = setInterval(updateChar, 60000);\r\n\r\n    // return () => {\r\n    //   clearInterval(timerId)\r\n    // }\r\n  }, []);\r\n    \r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  }\r\n\r\n  const updateChar = () => {\r\n    clearError();\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    getCharacter(id)\r\n      .then(onCharLoaded)\r\n  }\r\n\r\n  const spinner = loading ? <Spinner/> : null;\r\n  const content = !(loading || error) ? <View char={char}/> : null;\r\n  const errorMessage = !error ? null : <ErrorMessage />;\r\n\r\n  return (\r\n    <div className=\"randomchar\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n      <div className=\"randomchar__static\">\r\n        <p className=\"randomchar__title\">\r\n          Random character for today!<br/>\r\n          Do you want to get to know him better?\r\n        </p>\r\n        <p className=\"randomchar__title\">\r\n          Or choose another one\r\n        </p>\r\n        <button \r\n        className=\"button button__main\"\r\n        onClick={updateChar}\r\n        >\r\n          <div className=\"inner\">try it</div>\r\n        </button>\r\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst View = ({char}) => {\r\n  const {name, description, thumbnail, homepage, wiki} = char;\r\n\r\n  return (\r\n    <div className=\"randomchar__block\">\r\n      <img src={thumbnail} \r\n        alt=\"Random character\" \r\n        className={(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ?\r\n        'randomchar__img--not-found' :\r\n        'randomchar__img'}\r\n      />\r\n      <div className=\"randomchar__info\">\r\n        <p className=\"randomchar__name\">{name}</p>\r\n        <p className=\"randomchar__descr\">\r\n          {\r\n            description ?\r\n            (description.length >= 210 ? `${description.slice(0, 210)}...` : description) :\r\n            'There is no description of this hero...'\r\n          }\r\n        </p>\r\n        <div className=\"randomchar__btns\">\r\n          <a href={homepage} className=\"button button__main\">\r\n            <div className=\"inner\">Homepage</div>\r\n          </a>\r\n          <a href={wiki} className=\"button button__secondary\">\r\n            <div className=\"inner\">Wiki</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n\r\n  const [charList, setCharList] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState([]);\r\n  const [offset, setOffset] = useState(210);\r\n  const [charEnded, setCharEnded] = useState(false);\r\n\r\n  const {loading, error, getAllCharacters} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    onRequest(offset, true)\r\n  }, []);\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n    getAllCharacters(offset)\r\n    .then(onCharListLoaded)\r\n  }\r\n \r\n  const onCharListLoaded = (newCharList) => {\r\n    let ended = false;\r\n\r\n    if (newCharList.length < 9) {\r\n      ended = true;\r\n    }\r\n\r\n    setCharList([...charList, ...newCharList]);\r\n    setNewItemLoading(newItemLoading => false);\r\n    setOffset(offset => offset + 9);\r\n    setCharEnded(charEnded => ended);\r\n  }\r\n\r\n  const itemRefs = useRef([]); \r\n\r\n  const focusOnItem = (id) => {\r\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n    itemRefs.current[id].classList.add('char__item_selected');\r\n    itemRefs.current[id].focus();\r\n  }\r\n\r\n  const spinner = loading && !newItemLoading ? <Spinner/> : null; \r\n  const errorMessage = !error ? null : <ErrorMessage />;\r\n\r\n  const cards = charList.map((item, i) => {\r\n    return (\r\n      <li \r\n        className=\"char__item\"\r\n        key={item.id}\r\n        onClick={() => {props.onCharSelected(item.id); focusOnItem(i);}}\r\n        tabIndex={0}\r\n        ref={(el) => itemRefs.current[i] = el}\r\n        onKeyPress={(e) => {\r\n          if (e.key === ' ' || e.key === \"Enter\") {\r\n            props.onCharSelected(item.id);\r\n            focusOnItem(i);\r\n          }}}>\r\n        <img className={(item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ?\r\n          'char__img--not-found' :\r\n          'char__img'} \r\n          src={item.thumbnail} alt=\"#\"/>\r\n        <div className=\"char__name\">{item.name}</div>\r\n      </li>\r\n    )\r\n  });\r\n  \r\n  return (\r\n    <div className=\"char__list\">\r\n      <ul className=\"char__grid\">\r\n        {errorMessage}\r\n        {spinner}\r\n        {cards}\r\n      </ul>\r\n      <button \r\n        className=\"button button__main button__long\"\r\n        disabled={newItemLoading}\r\n        style={{'display': charEnded ? 'none' : 'block'}}\r\n        onClick={() => onRequest(offset)}>\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nCharList.propTypes = {\r\n  onCharSelected: PropTypes.func\r\n};\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n  return (\r\n    <>\r\n      <p className=\"char__select\">Please select a character to see information</p>\r\n      <div className=\"skeleton\">\r\n        <div className=\"pulse skeleton__header\">\r\n          <div className=\"pulse skeleton__circle\"></div>\r\n          <div className=\"pulse skeleton__mini\"></div>\r\n        </div>\r\n        <div className=\"pulse skeleton__block\"></div>\r\n        <div className=\"pulse skeleton__block\"></div>\r\n        <div className=\"pulse skeleton__block\"></div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Skeleton;","import { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n  const [char, setChar] = useState(null);\r\n\r\n  const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n  }, [props.charId])\r\n\r\n  const onError = () => {\r\n    this.setState({\r\n      loading: false,\r\n      error: true\r\n    })\r\n  }\r\n\r\n  const updateChar = () => {\r\n    const {charId} = props;\r\n\r\n    if (!charId) {\r\n      return;\r\n    }\r\n\r\n    clearError();\r\n    getCharacter(charId)\r\n      .then(onCharLoaded)\r\n      .catch(onError)\r\n  }\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  }\r\n\r\n  const skeleton = char || loading || error ? null : <Skeleton/>;\r\n  const errorMessage = error ? <ErrorMessage/> : null;\r\n  const spinner = loading ? <Spinner/> : null;\r\n  const content = !(loading || error || !char) ? <View char={char}/> : null;\r\n\r\n  return (\r\n    <div className=\"char__info\">\r\n      {skeleton}\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst View = ({char}) => {\r\n  const {name, description, thumbnail, homepage, wiki, comics} = char;\r\n\r\n  let imgStyle = {'objectFit' : 'cover'};\r\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n      imgStyle = {'objectFit' : 'contain'};\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"char__basics\">\r\n        <img src={thumbnail} alt={name} style={imgStyle}/>\r\n        <div>\r\n          <div className=\"char__info-name\">{name}</div>\r\n          <div className=\"char__btns\">\r\n            <a href={homepage} className=\"button button__main\">\r\n              <div className=\"inner\">homepage</div>\r\n            </a>\r\n            <a href={wiki} className=\"button button__secondary\">\r\n              <div className=\"inner\">Wiki</div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n        </div>\r\n        <div className=\"char__descr\">\r\n          {description}\r\n        </div>\r\n        <div className=\"char__comics\">{comics.length === 0 ? null : 'Comics:'}</div>\r\n        <ul className=\"char__comics-list\">\r\n          {comics.length === 0 ? 'There is no comics with this character' : null}\r\n          {\r\n            comics.map((item, i) => {\r\n              if (i >= 10) return;\r\n\r\n              return (\r\n                <li key={i} className='char__comics-item'>\r\n                  {item.name}\r\n                </li>\r\n              )\r\n            })\r\n          }\r\n        </ul>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <RandomChar/>\r\n      <div className=\"char__content\">\r\n        <CharList onCharSelected={onCharSelected}/>\r\n        <CharInfo charId={selectedChar}/>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}